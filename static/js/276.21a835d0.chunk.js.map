{"version":3,"file":"static/js/276.21a835d0.chunk.js","mappings":"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","sources":["components/error/ErrorCard.tsx","components/video/Video.tsx"],"sourcesContent":["import \"./ErrorCard.scss\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faXmark } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ninterface ErrorCardProps {\r\n    message: string;\r\n    fill?: boolean;\r\n    onTop?: boolean;\r\n    position?: \"relative\" | \"absolute\";\r\n}\r\n\r\nfunction ErrorCard({\r\n    message,\r\n    position = \"absolute\",\r\n    fill = false,\r\n    onTop = false,\r\n}: ErrorCardProps) {\r\n    return (\r\n        <div className={`error-card ${fill && \"fill\"} ${onTop && \"on-top\"}`}>\r\n            <div className=\"error-card__wrapper\">\r\n                <div className=\"icon\">\r\n                    <FontAwesomeIcon icon={faXmark} />\r\n                </div>\r\n                {message}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ErrorCard;\r\n","import \"./Video.scss\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCircleCheck } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Loading from \"../loading/Loading\";\r\nimport ErrorCard from \"../error/ErrorCard\";\r\nimport { Course, Instructor, VideoDetails } from \"../../types/types\";\r\nimport { useCourse } from \"../../contexts/CourseContext\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\nimport { useAccessToken } from \"../../contexts/AccessTokenContext\";\r\n\r\nfunction Video() {\r\n    const { courseId, orderNb } = useParams();\r\n    const { course, videos, instructors, setVideos, setCourse } = useCourse();\r\n    const [video, setVideo] = useState<VideoDetails | null>(null);\r\n    const [isNextDisabled, setIsNextDisabled] = useState<boolean>(\r\n        orderNb === `${videos.length}` ? true : false\r\n    );\r\n    const [isPrevDisabled, setIsPrevDisabled] = useState<boolean>(\r\n        orderNb === \"1\" ? true : false\r\n    );\r\n\r\n    const [done, setDone] = useState<boolean>(video?.isDone ?? false);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<string>(\"\");\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const { user } = useAuth();\r\n\r\n    const accessToken = useAccessToken();\r\n\r\n    useEffect(() => {\r\n        const getVideo = async () => {\r\n            try {\r\n                setError(\"\");\r\n                setVideo(null);\r\n                const response = await fetch(\r\n                    process.env.REACT_APP_API_URL +\r\n                        `/api/videos/details/${courseId}/${orderNb}/${user?.uid}`,\r\n                    {\r\n                        method: \"GET\",\r\n                        headers: {\r\n                            \"content-type\": \"application/json\",\r\n                            \"x-access-token\": accessToken,\r\n                        },\r\n                    }\r\n                );\r\n\r\n                const data = await response.json();\r\n\r\n                if (response.status !== 200) throw Error(data.message);\r\n\r\n                setVideo(data[0]);\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    setError(error.message);\r\n                } else {\r\n                    setError(\"Error fetching data from server\");\r\n                }\r\n            }\r\n        };\r\n\r\n        getVideo();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [courseId, orderNb, user]);\r\n\r\n    // A simple useEffect to decide if the prev, next buttons are disabled\r\n    useEffect(() => {\r\n        if (orderNb === \"1\") {\r\n            setIsPrevDisabled(true);\r\n        } else {\r\n            setIsPrevDisabled(false);\r\n        }\r\n\r\n        if (orderNb === `${videos.length}`) {\r\n            setIsNextDisabled(true);\r\n        } else {\r\n            setIsNextDisabled(false);\r\n        }\r\n    }, [orderNb, videos.length]);\r\n\r\n    // This useEffect synchronizes the data retrieved from the backend with the component's state.\r\n    useEffect(() => {\r\n        setDone(video?.isDone ?? false);\r\n    }, [video]);\r\n\r\n    const handleDoneClick = async () => {\r\n        // this is just to avoid react anger :)\r\n        if (!course) return;\r\n\r\n        /**\r\n         * The first implementation I came with was to define a new function in the course context\r\n         * that requests a new copy of the videos and course, this was inefficient and not necessary.\r\n         *\r\n         * The second implementation which is the current one is to update the course and videos\r\n         * state locally in the client side without requesting a new copy from the server while keeping\r\n         * the server in sync with the client side. this reduced the number of requests to the server\r\n         * and made the app more efficient. And each time the user refreshes the page, the data will be\r\n         * fetched from the server.\r\n         */\r\n\r\n        let updatedCourse: Course;\r\n        setLoading(true);\r\n        // if already done then delete the done status\r\n        if (done) {\r\n            const response = await fetch(\r\n                `http://localhost:5050/api/videos/finished`,\r\n                {\r\n                    method: \"DELETE\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify({\r\n                        courseId,\r\n                        orderNb,\r\n                        userId: user?.uid ?? null,\r\n                    }),\r\n                }\r\n            );\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.status !== 200) {\r\n                setError(data.message);\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            updatedCourse = {\r\n                ...course,\r\n                completed: (course?.completed ?? 1) - 1,\r\n            };\r\n\r\n            setDone(false);\r\n        }\r\n        // if not done then set the done status\r\n        else {\r\n            const response = await fetch(\r\n                `http://localhost:5050/api/videos/finished`,\r\n                {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify({\r\n                        courseId,\r\n                        orderNb,\r\n                        userId: user?.uid ?? null,\r\n                    }),\r\n                }\r\n            );\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.status !== 200) {\r\n                setError(data.message);\r\n                setLoading(false);\r\n                return;\r\n            }\r\n            updatedCourse = {\r\n                ...course,\r\n                completed: (course?.completed ?? -1) + 1,\r\n            };\r\n\r\n            setDone(true);\r\n        }\r\n\r\n        const updatedVideos = videos.map((video) => {\r\n            if (\r\n                video.courseId === courseId &&\r\n                video.orderNb === parseInt(orderNb ?? \"0\")\r\n            ) {\r\n                return { ...video, isDone: !video.isDone };\r\n            }\r\n\r\n            return video;\r\n        });\r\n\r\n        setCourse(updatedCourse);\r\n        setVideos(updatedVideos);\r\n\r\n        setLoading(false);\r\n    };\r\n\r\n    const handlePrevClick = () => {\r\n        // set true to avoid race condition\r\n        setIsPrevDisabled(true);\r\n\r\n        const prevOrderNb = parseInt(orderNb ?? \"0\") - 1;\r\n        navigate(`/course/${courseId}/${prevOrderNb}`);\r\n    };\r\n\r\n    const handleNextClick = () => {\r\n        // set true to avoid race condition\r\n        setIsNextDisabled(true);\r\n\r\n        const nextOrderNb = parseInt(orderNb ?? \"0\") + 1;\r\n        navigate(`/course/${courseId}/${nextOrderNb}`);\r\n    };\r\n\r\n    if (error)\r\n        return (\r\n            <div className=\"video\">\r\n                <ErrorCard message={error} />\r\n            </div>\r\n        );\r\n\r\n    return (\r\n        <div className={`video ${video?.isDone ? \"done\" : null}`}>\r\n            {!video ? (\r\n                <Loading />\r\n            ) : (\r\n                <>\r\n                    <div className=\"video__heading\">\r\n                        <h2>{video.title}</h2>\r\n                        {!!done && (\r\n                            <FontAwesomeIcon\r\n                                className=\"video__heading__check\"\r\n                                icon={faCircleCheck}\r\n                            ></FontAwesomeIcon>\r\n                        )}\r\n                    </div>\r\n                    <video controls>\r\n                        {/* <source src={video.videoUrl} type=\"video/mp4\" /> */}\r\n                    </video>\r\n                    <div className=\"video__instructor\">\r\n                        Instructor(s):{\" \"}\r\n                        {instructors.map(\r\n                            ({ instructorFullName }: Instructor, idx) => {\r\n                                return (\r\n                                    instructorFullName +\r\n                                    (idx === instructors.length - 1 ? \"\" : \", \")\r\n                                );\r\n                            }\r\n                        )}\r\n                    </div>\r\n                    <div className=\"video__description\">\r\n                        {video.description}\r\n                    </div>\r\n                    <div className=\"video__nav\">\r\n                        {user && (\r\n                            <button\r\n                                className={`done-btn ${done ? \"done\" : null}`}\r\n                                onClick={handleDoneClick}\r\n                                disabled={loading}\r\n                            >\r\n                                Done\r\n                            </button>\r\n                        )}\r\n                        <button\r\n                            className=\"prev-btn\"\r\n                            onClick={handlePrevClick}\r\n                            disabled={isPrevDisabled}\r\n                        >\r\n                            Prev\r\n                        </button>\r\n                        <button\r\n                            className=\"next-btn\"\r\n                            onClick={handleNextClick}\r\n                            disabled={isNextDisabled}\r\n                        >\r\n                            Next\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Video;\r\n"],"names":["_ref","message","position","fill","onTop","_jsx","className","concat","children","_jsxs","FontAwesomeIcon","icon","faXmark","_video$isDone","courseId","orderNb","useParams","course","videos","instructors","setVideos","setCourse","useCourse","video","setVideo","useState","isNextDisabled","setIsNextDisabled","length","isPrevDisabled","setIsPrevDisabled","done","setDone","isDone","loading","setLoading","error","setError","navigate","useNavigate","user","useAuth","accessToken","useAccessToken","useEffect","async","response","fetch","process","uid","method","headers","data","json","status","Error","getVideo","_video$isDone2","ErrorCard","_Fragment","title","faCircleCheck","controls","map","idx","instructorFullName","description","onClick","updatedCourse","_user$uid","_course$completed","body","JSON","stringify","userId","completed","_user$uid2","_course$completed2","updatedVideos","parseInt","disabled","handlePrevClick","prevOrderNb","handleNextClick","nextOrderNb","Loading"],"sourceRoot":""}