{"version":3,"file":"static/js/756.a95684ee.chunk.js","mappings":"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","sources":["components/error/ErrorCard.tsx","pages/course/Course.tsx"],"sourcesContent":["import \"./ErrorCard.scss\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faXmark } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ninterface ErrorCardProps {\r\n    message: string;\r\n    fill?: boolean;\r\n    onTop?: boolean;\r\n    position?: \"relative\" | \"absolute\";\r\n}\r\n\r\nfunction ErrorCard({\r\n    message,\r\n    position = \"absolute\",\r\n    fill = false,\r\n    onTop = false,\r\n}: ErrorCardProps) {\r\n    return (\r\n        <div className={`error-card ${fill && \"fill\"} ${onTop && \"on-top\"}`}>\r\n            <div className=\"error-card__wrapper\">\r\n                <div className=\"icon\">\r\n                    <FontAwesomeIcon icon={faXmark} />\r\n                </div>\r\n                {message}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ErrorCard;\r\n","import \"./Course.scss\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Link, NavLink, Outlet, useParams } from \"react-router-dom\";\r\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { memo, useEffect } from \"react\";\r\nimport ErrorCard from \"../../components/error/ErrorCard\";\r\nimport { CourseVideos } from \"../../types/types\";\r\nimport { useCourse } from \"../../contexts/CourseContext\";\r\nimport Loading from \"../../components/loading/Loading\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\nimport { useTheme } from \"../../contexts/ThemeContext\";\r\n\r\ninterface NavListProps {\r\n    courseId: string;\r\n    videos: CourseVideos[];\r\n    isSmallScreen: boolean;\r\n}\r\n\r\n// Separated this part into a separate component to prevent unnecesary rendering when the\r\n// video component handled with the <Outlet /> is updated\r\nconst NavList = memo(({ courseId, videos, isSmallScreen }: NavListProps) => {\r\n    return (\r\n        <div className=\"course__nav__list\">\r\n            {videos &&\r\n                videos.map(({ orderNb, title, isDone }: CourseVideos, idx) => {\r\n                    const TEXT_OFFSET: number = 35;\r\n                    // on small screens don't cut title\r\n                    const isLong = isSmallScreen\r\n                        ? false\r\n                        : title.length > TEXT_OFFSET;\r\n                    return (\r\n                        <NavLink\r\n                            data-tooltip={isLong ? title : null}\r\n                            key={orderNb}\r\n                            to={`/course/${courseId}/${orderNb}`}\r\n                            className={({ isActive }) => {\r\n                                let classArr = [];\r\n\r\n                                if (isActive) classArr.push(\"active\");\r\n\r\n                                if (isLong)\r\n                                    classArr.push(\r\n                                        `tooltip ${\r\n                                            idx === 0 ? \"bottom\" : \"top\"\r\n                                        }`\r\n                                    );\r\n\r\n                                if (isDone) classArr.push(\"done\");\r\n\r\n                                return classArr.join(\" \");\r\n                            }}\r\n                        >\r\n                            <span className=\"course__nav__id\">{orderNb}</span>\r\n                            <span className=\"course__nav__title\">\r\n                                {isLong\r\n                                    ? `${title.slice(0, TEXT_OFFSET + 1)}...`\r\n                                    : title}\r\n                            </span>\r\n                        </NavLink>\r\n                    );\r\n                })}\r\n        </div>\r\n    );\r\n});\r\n\r\nfunction Course() {\r\n    const { courseId } = useParams();\r\n    const { videos, course, contextLoading, contextError, setCourseId } =\r\n        useCourse();\r\n    console.log(\"videos: \", videos);\r\n    console.log(\"course: \", course);\r\n    const { user } = useAuth();\r\n    const { isSmallScreen } = useTheme();\r\n\r\n    useEffect(() => {\r\n        if (!videos || !course) {\r\n            setCourseId(courseId ?? \"\");\r\n        }\r\n    }, [course, courseId, setCourseId, videos]);\r\n\r\n    // If the user is not logged in and the course is premium then show an error message\r\n    if (!user && course?.isPremium) {\r\n        return (\r\n            <div className=\"status__holder\">\r\n                <ErrorCard\r\n                    message=\"You need to be logged in to access this course\"\r\n                    position=\"relative\"\r\n                    fill={true}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // If the user is not a premium member and the course is premium then show an error message\r\n    if (user && !user.isPremium && course?.isPremium) {\r\n        return (\r\n            <div className=\"status__holder\">\r\n                <ErrorCard\r\n                    message=\"You need to be a premium member to access this course\"\r\n                    position=\"relative\"\r\n                    fill={true}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // on small screens don't cut the course title\r\n    const isCourseTitleLong = isSmallScreen\r\n        ? false\r\n        : !course\r\n        ? false\r\n        : course.title.length > 65;\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"course\">\r\n                <div className=\"wrapper\">\r\n                    {contextError && (\r\n                        <ErrorCard message={contextError} fill={true} />\r\n                    )}\r\n                    <div className=\"course__nav\">\r\n                        {contextError && <ErrorCard message={contextError} />}\r\n                        {contextLoading && <Loading fill={true} onTop={true} />}\r\n                        <div className=\"course__nav__head\">\r\n                            <div className=\"course__nav__head__title\">\r\n                                <Link\r\n                                    className=\"course__nav__head__title__back tooltip bottom\"\r\n                                    to=\"/\"\r\n                                    data-tooltip=\"Home\"\r\n                                >\r\n                                    <FontAwesomeIcon\r\n                                        className=\"course__nav__head__icon\"\r\n                                        icon={faArrowLeft}\r\n                                    />\r\n                                </Link>\r\n                                {course && (\r\n                                    <h2\r\n                                        data-tooltip={`${\r\n                                            isCourseTitleLong\r\n                                                ? course.title\r\n                                                : null\r\n                                        }`}\r\n                                        className={`${\r\n                                            isCourseTitleLong\r\n                                                ? \"tooltip bottom\"\r\n                                                : null\r\n                                        }`}\r\n                                    >\r\n                                        {isCourseTitleLong\r\n                                            ? `${course.title.slice(0, 65)}...`\r\n                                            : course.title}{\" \"}\r\n                                    </h2>\r\n                                )}\r\n                            </div>\r\n                            {(!course || !videos) && !contextError && (\r\n                                <div className=\"done__videos\">\r\n                                    {course?.completed ?? 0} out of{\" \"}\r\n                                    {videos?.length}\r\n                                    <div className=\"done__videos__progress\">\r\n                                        <span\r\n                                            style={{\r\n                                                width: `${\r\n                                                    ((course?.completed ?? 0) /\r\n                                                        (videos?.length ?? 1)) *\r\n                                                    100\r\n                                                }%`,\r\n                                            }}\r\n                                        ></span>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                        <NavList\r\n                            courseId={courseId ?? \"\"}\r\n                            videos={videos}\r\n                            isSmallScreen={isSmallScreen}\r\n                        />\r\n                    </div>\r\n                    <Outlet />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Course;\r\n"],"names":["_ref","message","position","fill","onTop","_jsx","className","concat","children","_jsxs","FontAwesomeIcon","icon","faXmark","NavList","memo","courseId","videos","isSmallScreen","map","_ref2","idx","orderNb","title","isDone","isLong","length","NavLink","to","_ref3","isActive","classArr","push","join","slice","TEXT_OFFSET","_course$completed","_course$completed2","_videos$length","useParams","course","contextLoading","contextError","setCourseId","useCourse","console","log","user","useAuth","useTheme","useEffect","isPremium","ErrorCard","isCourseTitleLong","Loading","Link","faArrowLeft","completed","style","width","Outlet"],"sourceRoot":""}