{"version":3,"file":"static/js/952.d559fe4a.chunk.js","mappings":"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","sources":["components/dashboard/header/Header.tsx","pages/dashboard/users/Users.tsx"],"sourcesContent":["interface HeaderProps {\r\n    title: string;\r\n    subtitle: string;\r\n}\r\n\r\nconst Header = ({ title, subtitle }: HeaderProps) => {\r\n    return (\r\n        <div\r\n            style={{\r\n                marginBottom: \"15px\",\r\n            }}\r\n        >\r\n            <h2\r\n                style={{\r\n                    color: \"var(--primary-text-color)\",\r\n                    fontSize: \"32px\",\r\n                    fontWeight: \"bold\",\r\n                    marginBottom: \"5px\",\r\n                }}\r\n            >\r\n                {title}\r\n            </h2>\r\n            <h5\r\n                style={{\r\n                    color: \"var(--light-green-text-color)\",\r\n                    fontWeight: \"400\",\r\n                    fontSize: \"16px\",\r\n                }}\r\n            >\r\n                {subtitle}\r\n            </h5>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import \"./Users.scss\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Header from \"../../../components/dashboard/header/Header\";\r\nimport { DataGrid, GridColDef } from \"@mui/x-data-grid\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faCircleCheck,\r\n    faGraduationCap,\r\n    faLock,\r\n    faUser,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { UserFromDB } from \"../../../types/types\";\r\nimport { useAccessToken } from \"../../../contexts/AccessTokenContext\";\r\n\r\ninterface UserRoleProps {\r\n    userId: string;\r\n    role: string;\r\n}\r\n\r\nconst UserRole = ({ userId, role }: UserRoleProps) => {\r\n    const [prevChoice, setPrevChoice] = useState(role);\r\n    const [choice, setChoice] = useState(role);\r\n    const [isEditing, setIsEditing] = useState(false);\r\n\r\n    const accessToken = useAccessToken();\r\n\r\n    role = role.toUpperCase();\r\n\r\n    const roleIcons: { [key: string]: JSX.Element } = {\r\n        ADMIN: <FontAwesomeIcon style={{ fontSize: \"11px\" }} icon={faLock} />,\r\n        INSTRUCTOR: (\r\n            <FontAwesomeIcon\r\n                style={{ fontSize: \"11px\" }}\r\n                icon={faGraduationCap}\r\n            />\r\n        ),\r\n        USER: <FontAwesomeIcon style={{ fontSize: \"11px\" }} icon={faUser} />,\r\n    };\r\n\r\n    const handleChangeRole = (role: string) => {\r\n        setChoice(role);\r\n        setIsEditing(true);\r\n    };\r\n\r\n    const handleUpdate = () => {\r\n        const updateUserRole = async () => {\r\n            try {\r\n                const response = await fetch(\r\n                    process.env.REACT_APP_API_URL + \"/api/users/\" + userId,\r\n                    {\r\n                        method: \"PATCH\",\r\n                        headers: {\r\n                            \"content-type\": \"application/json\",\r\n                            \"x-access-token\": accessToken,\r\n                        },\r\n                        body: JSON.stringify({\r\n                            role: choice,\r\n                        }),\r\n                    }\r\n                );\r\n\r\n                if (response.ok) {\r\n                    setPrevChoice(choice);\r\n                    setIsEditing(false);\r\n                } else {\r\n                    setChoice(prevChoice);\r\n                }\r\n            } catch (error) {}\r\n        };\r\n\r\n        updateUserRole();\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setChoice(prevChoice);\r\n        setIsEditing(false);\r\n    };\r\n\r\n    if (isEditing) {\r\n        return (\r\n            <div className=\"users-table__confirm__role\">\r\n                <span className=\"is-easy hover\" onClick={handleUpdate}>\r\n                    Update\r\n                </span>\r\n                <span className=\"is-hard hover\" onClick={handleCancel}>\r\n                    Cancel\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                width: \"60%\",\r\n                margin: \"0 auto\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n            }}\r\n        >\r\n            <span className=\"icon\">{roleIcons[role]}</span>\r\n            <select\r\n                className=\"users-table__role\"\r\n                value={choice}\r\n                onChange={(e) => handleChangeRole(e.target.value)}\r\n            >\r\n                {Object.keys(roleIcons).map((role) => (\r\n                    <option key={role} value={role}>\r\n                        {role}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Users = () => {\r\n    const [users, setUsers] = useState<UserFromDB[]>([]);\r\n\r\n    const accessToken = useAccessToken();\r\n\r\n    useEffect(() => {\r\n        const fetchUsers = async () => {\r\n            try {\r\n                const response = await fetch(\r\n                    process.env.REACT_APP_API_URL + \"/api/users\",\r\n                    {\r\n                        method: \"GET\",\r\n                        headers: {\r\n                            \"content-type\": \"application/json\",\r\n                            \"x-access-token\": accessToken,\r\n                        },\r\n                    }\r\n                );\r\n\r\n                const data = await response.json();\r\n                setUsers(data);\r\n            } catch (error) {}\r\n        };\r\n\r\n        fetchUsers();\r\n    }, [accessToken]);\r\n\r\n    const columns: GridColDef<UserFromDB>[] = [\r\n        { field: \"id\", headerName: \"ID\" },\r\n        { field: \"email\", headerName: \"Email\", flex: 1 },\r\n        {\r\n            field: \"role\",\r\n            headerName: \"Role\",\r\n            flex: 1,\r\n            headerAlign: \"center\",\r\n            align: \"center\",\r\n            renderCell: ({ row: { role, id } }) => (\r\n                <UserRole userId={id} role={role} />\r\n            ),\r\n        },\r\n        {\r\n            field: \"isPremium\",\r\n            headerName: \"Premium\",\r\n            flex: 1,\r\n            renderCell: ({ row: { isPremium } }) => {\r\n                return (\r\n                    <div>\r\n                        <FontAwesomeIcon\r\n                            style={{\r\n                                color: isPremium ? \"#3fb24b\" : \"grey\",\r\n                            }}\r\n                            icon={faCircleCheck}\r\n                        />\r\n                    </div>\r\n                );\r\n            },\r\n        },\r\n    ];\r\n    return (\r\n        <div className=\"dashboard-users\">\r\n            <Header\r\n                title=\"Users\"\r\n                subtitle=\"In this page you can manage users\"\r\n            />\r\n            <div className=\"users-table\">\r\n                <DataGrid\r\n                    sx={{\r\n                        \"&.MuiDataGrid-root .MuiDataGrid-cell:focus-within\": {\r\n                            outline: \"none !important\",\r\n                        },\r\n\r\n                        \"& .MuiDataGrid-filler\": {\r\n                            height: \"1px !important\",\r\n                        },\r\n\r\n                        \"& .MuiDataGrid-overlayWrapper\": {\r\n                            height: \"55px !important\",\r\n                        },\r\n                    }}\r\n                    rows={users}\r\n                    columns={columns}\r\n                    slots={{\r\n                        noRowsOverlay: () => (\r\n                            <div\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"center\",\r\n                                    alignItems: \"center\",\r\n                                    height: \"100%\",\r\n                                    color: \"var(--primary-text-color)\",\r\n                                }}\r\n                            >\r\n                                No users found\r\n                            </div>\r\n                        ),\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Users;\r\n"],"names":["_ref","title","subtitle","_jsxs","style","marginBottom","children","_jsx","color","fontSize","fontWeight","UserRole","userId","role","prevChoice","setPrevChoice","useState","choice","setChoice","isEditing","setIsEditing","accessToken","useAccessToken","toUpperCase","roleIcons","ADMIN","FontAwesomeIcon","icon","faLock","INSTRUCTOR","faGraduationCap","USER","faUser","handleUpdate","async","fetch","process","method","headers","body","JSON","stringify","ok","error","updateUserRole","handleCancel","className","onClick","width","margin","display","justifyContent","alignItems","value","onChange","e","handleChangeRole","target","Object","keys","map","Users","users","setUsers","useEffect","response","data","json","fetchUsers","columns","field","headerName","flex","headerAlign","align","renderCell","_ref2","row","id","_ref3","isPremium","faCircleCheck","Header","DataGrid","sx","outline","height","rows","slots","noRowsOverlay"],"sourceRoot":""}